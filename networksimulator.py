import heapq
import json
import sys

class NetworkSimulator(object):
    """The main class for the network simulator.

    The NetworkSimulator holds a reference to all elements of the network in
    the form of dictionaries. Also, it has a priority queue of events based
    on execution time. Finally, it holds a reference to a DataMetrics object
    which contains all the data obtained by the simulator.

    Attributes:
        flows (dict): all flows with their id's as the keys
        links (dict): all links with their id's as the keys
        routers (dict): all routers with their id's as the keys
        hosts (dict): all hosts with their id's as the keys
        pq (arr): a heapq priority queue whose elements are a tuple in the
            form (execution_time, event_id, f) where f is the function to be
            run
        data (DataMetrics): container of all data generated by the simulator
        cur_time (float): a current time counter in milliseconds
        num_active_flows (int): Number of currently active flows
        event_counter (int): an event counter used to uniquely identify events

    """

    def __init__(self):
        self.flows = {}
        self.links = {}
        self.routers = {}
        self.hosts = {}

        self.pq = []
        # self.data = DataMetrics()

        self._cur_time = 0
        self._num_active_flows = 0
        self._event_counter = 0

    @property
    def cur_time(self):
        return self._cur_time

    @cur_time.setter
    def cur_time(self, time):
        self._cur_time = time

    @property
    def event_counter(self):
        return self._event_counter

    @event_counter.setter
    def event_counter(self, val):
        self._event_counter = val

    def add_flow(self):
        """Adds a new flow to the network.

        num_active_flows is initialized to the number of flows.

        Args:
            ...

        """
        pass

    def add_link(self):
        """Adds a new link to the network.

        Args:
            ...
        """
        pass

    def add_router(self):
        """Adds a new router to the network.

        Args:
            ...

        """
        pass

    def add_host(self):
        """Adds a new host to the network.

        Args:
            ...

        """
        pass

    def populate(self, network_description):
        """Populates a new network given a network description in JSON form.

        Args:
            network_description (str): name of the json file containg the
                network description

        """
        pass

    def run(self, duration=sys.maxint):
        """Runs the simulation for the given duration.
        
        Args:
            duration (float): the duration of the simulation in milliseconds.
                By default, the simulation runs until termination.

        """
        pass

    def add_event(self, f, time=None):
        """Adds an event to the priority queue.

        Args:
            f (func): The function to be run during this event.
            time (float): The time at which the event should be executed. If
                not specified, time is set to the current time.

        """
        pass

    def plot_metrics(self):
        """Plots all relevant metrics from DataMetrics."""
        pass
    
